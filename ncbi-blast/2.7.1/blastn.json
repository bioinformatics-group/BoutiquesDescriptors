{
    "name": "blastn",
    "tool-version": "v2.7.1",
    "author": "Altschul et al.",
    "command-line": "init_genpipes -a /tmp/$USER/cvmfs-cache -c /etc/parrot/ cp -R [DB_DIR]/* . 2> /dev/null \\;  /cvmfs/soft.mugqic/CentOS6/software/blast/ncbi-blast-2.7.1+/bin/blastn [IMPORT_SEARCH_STRATEGY] [EXPORT_SEARCH_STRATEGY] [TASK] [DB] [DBSIZE] [GILIST] [SEQIDLIST] [NEGATIVE_GILIST] [NEGATIVE_SEQIDLIST] [ENTREZ_QUERY] [DB_SOFT_MASK] [DB_HARD_MASK] [SUBJECT] [SUBJECT_LOC] [QUERY] [OUT] [EVALUE] [WORD_SIZE] [GAPOPEN] [GAPEXTEND] [PERC_IDENTITY] [QCOV_HSP_PERC] [MAX_HSPS] [XDROP_UNGAP] [XDROP_GAP] [XDROP_GAP_FINAL] [SEARCHSP] [SUM_STATS] [PENALTY] [REWARD] [fNO_GREEDY] [MIN_RAW_GAPPED_SCORE] [TEMPLATE_TYPE] [TEMPLATE_LENGTH] [DUST] [FILTERING_DB] [WINDOW_MASKER_TAXID] [WINDOW_MASKER_DB] [SOFT_MASKING] [fUNGAPPED] [CULLING_LIMIT] [BEST_HIT_OVERHANG] [BEST_HIT_SCORE_EDGE] [WINDOW_SIZE] [OFF_DIAGONAL_RANGE] [USE_INDEX] [INDEX_NAME] [fLCASE_MASKING] [QUERY_LOC] [STRAND] [fPARSE_DEFLINES] [OUTFMT] [fSHOW_GIS] [NUM_DESCRIPTIONS] [NUM_ALIGNMENTS] [LINE_LENGTH] [fHTML] [MAX_TARGET_SEQS] [NUM_THREADS] [fREMOTE]",
    "container-image": {
        "type": "singularity",
        "image": "c3genomics/genpipes",
        "index": "docker://"
    },
    "description": "Nucleotide-Nucleotide BLAST 2.7.1+",
    "doi": "10.5281/zenodo.3239451",
    "inputs": [
        {
            "command-line-flag": "-db", 
            "description": "BLAST database name", 
            "id": "db", 
            "name": "BLAST database name", 
            "optional": true, 
            "type": "String", 
            "disables-inputs": ["subject", "subject_loc"],
            "value-key": "[DB]"
        },
        {
            "description": "directory containing BLAST Archive format in ASN.1 (i.e.: output format 11) and all needed db files",
            "value-key": "[DB_DIR]",
            "optional": true,
            "default-value": ".",
            "type": "File",
            "id": "archive_dir",
            "requires-inputs": ["db"],
            "name": "Blast Database Directory"
        },
        {
            "command-line-flag": "-query_loc", 
            "description": "Location on the query sequence in 1-based offsets (Format: start-stop)", 
            "id": "query_loc", 
            "name": "query location", 
            "optional": true, 
            "type": "String", 
            "value-key": "[QUERY_LOC]"
        },
        {
            "command-line-flag": "-strand", 
            "description": "   Query strand(s) to search against database/subject\n   Default = `both'", 
            "id": "strand", 
            "name": "Query Strand to Search", 
            "optional": true, 
            "type": "String", 
            "value-choices": [
                "both", 
                "minus", 
                "plus"
            ], 
            "value-key": "[STRAND]"
        },
        {
            "command-line-flag": "-subject_loc", 
            "description": "Location on the query sequence in 1-based offsets (Format: start-stop)", 
            "id": "subject_loc", 
            "name": "Subject Sequence Location", 
            "optional": true, 
            "type": "String", 
            "disables-inputs": ["db", "gilist", "seqidlist", "negative_gilist", "negative_seqidlist", "db_soft_mask", "db_hard_mask"],
            "value-key": "[SUBJECT_LOC]"
        },
        {
            "command-line-flag": "-task", 
            "description": "Task to execute", 
            "id": "task", 
            "name": "Task Name", 
            "optional": true, 
            "type": "String", 
            "value-choices": [
                "blastn", 
                "blastn-short",
                "dc-megablast",
                "megablast",
                "rmblastn"
            ], 
            "value-key": "[TASK]"
        }, 
        {
            "command-line-flag": "-dust", 
            "description": "Filter query sequence with DUST\n  (Format: 'yes', 'level window linker', or   'no' to disable)\n   Default = '20 64 1')", 
            "id": "dust", 
            "name": "DUST Options", 
            "optional": true, 
            "type": "String", 
            "value-key": "[DUST]"
        }, 
        {
            "command-line-flag": "-gilist", 
            "description": "Restrict search of database to list of GI's", 
            "id": "gilist", 
            "name": "Restrictive GI List", 
            "optional": true, 
            "type": "String", 
            "disables-inputs": ["negative_gilist", "seqidlist", "negative_seqidlist", "remote", "subject", "subject_loc"],
            "value-key": "[GILIST]"
        },
        {
            "command-line-flag": "-seqidlist", 
            "description": "Restrict search of database to list of SeqId's", 
            "id": "seqidlist", 
            "name": "Restrictive Sequence Id List", 
            "optional": true, 
            "type": "String", 
            "disables-inputs": ["gilist", "negative_gilist", "negative_seqidlist", "remote", "subject", "subject_loc"],
            "value-key": "[SEQIDLIST]"
        },
        {
            "command-line-flag": "-negative_gilist", 
            "description": "Restrict search of database to everything except the listed GIs", 
            "id": "negative_gilist", 
            "name": "Exclusive GI List", 
            "optional": true, 
            "type": "String", 
            "disables-inputs": ["gilist", "seqidlist", "remote", "subject", "subject_loc"],
            "value-key": "[NEGATIVE_GILIST]"
        },
        {
            "command-line-flag": "-negative_seqidlist", 
            "description": "Restrict search of database to everything except the listed SeqIDs", 
            "id": "negative_seqidlist", 
            "name": "Exclusive Sequence Id List", 
            "optional": true, 
            "type": "String", 
            "disables-inputs": ["gilist", "seqidlist", "remote", "subject", "subject_loc"],
            "value-key": "[NEGATIVE_SEQIDLIST]"
        },
        {
            "command-line-flag": "-entrez_query", 
            "description": "Restrict search with the given Entrez query", 
            "id": "entrez_query", 
            "name": "Exclusive Sequence Id List", 
            "optional": true, 
            "type": "String", 
            "requires-inputs": ["remote"],
            "value-key": "[ENTREZ_QUERY]"
        },
        {
            "command-line-flag": "-db_soft_mask", 
            "description": "Filtering algorithm ID to apply to the BLAST database as soft masking", 
            "id": "db_soft_mask", 
            "name": "Soft Mask ID", 
            "optional": true, 
            "type": "String", 
            "disables-inputs": ["db_hard_mask", "subject", "subject_loc"],
            "value-key": "[DB_SOFT_MASK]"
        },
        {
            "command-line-flag": "-db_hard_mask", 
            "description": "Filtering algorithm ID to apply to the BLAST database as hard masking", 
            "id": "db_hard_mask", 
            "name": "Hard Mask ID", 
            "optional": true, 
            "type": "String", 
            "disables-inputs": ["db_soft_mask", "subject", "subject_loc"],
            "value-key": "[DB_HARD_MASK]"
        },
        {
            "command-line-flag": "-index_name", 
            "description": "MegaBLAST database index name (deprecated; use only for old style indices)", 
            "id": "index_name", 
            "name": "MegaBLAST database index name", 
            "optional": true, 
            "type": "String", 
            "value-key": "[INDEX_NAME]"
        },
        {
            "command-line-flag": "-filtering_db", 
            "description": "BLAST database containing filtering elements (i.e.: repeats)", 
            "id": "filtering_db", 
            "name": "BLAST filtering database", 
            "optional": true, 
            "type": "String", 
            "value-key": "[FILTERING_DB]"
        },
        {
            "command-line-flag": "-window_masker_db", 
            "description": "Enable WindowMasker filtering using this repeats database.", 
            "id": "window_masker_db", 
            "name": "Window Masker DB", 
            "optional": true, 
            "type": "String", 
            "value-key": "[WINDOW_MASKER_DB]"
        },
        {
            "command-line-flag": "-template_type", 
            "description": "Discontiguous MegaBLAST template type", 
            "id": "template_type", 
            "name": "Discontiguous MegaBLAST template type", 
            "optional": true, 
            "type": "String", 
            "value-choices": [
                "coding", 
                "coding_and_optimal",
                "optimal"
            ],
            "requires-inputs": ["template_length"],
            "value-key": "[TEMPLATE_TYPE]"
        },
        {
            "command-line-flag": "-lcase_masking",
            "description": "Use lower case filtering in query and subject sequence(s)?",
            "id": "lcase_masking",
            "name": "Lowercase Filtering",
            "optional": true,
            "type": "Flag",
            "value-key": "[fLCASE_MASKING]"
        },
        {
            "command-line-flag": "-ungapped",
            "description": "Perform ungapped alignment only?",
            "id": "ungapped",
            "name": "Ungapped Alignment",
            "optional": true,
            "type": "Flag",
            "value-key": "[fUNGAPPED]"
        },
        {
            "command-line-flag": "-parse_deflines",
            "description": "Should the query and subject defline(s) be parsed?",
            "id": "parse_deflines",
            "name": "Parse Deflines",
            "optional": true,
            "type": "Flag",
            "value-key": "[fPARSE_DEFLINES]"
        },
        {
            "command-line-flag": "-remote",
            "description": "Execute search remotely?",
            "id": "remote",
            "name": "Remote Search",
            "optional": true,
            "type": "Flag",
            "disables-inputs": ["gilist", "seqidlist", "negative_gilist", "negative_seqidlist", "subject_loc", "num_threads"],
            "value-key": "[fREMOTE]"
        },
        {
            "command-line-flag": "-no_greedy",
            "description": "Use non-greedy dynamic programming extension",
            "id": "no_greedy",
            "name": "Non-Greedy Dynamic Programming Extension",
            "optional": true,
            "type": "Flag",
            "value-key": "[fNO_GREEDY]"
        },
        {
            "command-line-flag": "-use_index",
            "description": "Use MegaBLAST database index\n  Default 'false'",
            "id": "use_index",
            "name": "MegaBLAST Database Index Usage",
            "optional": true,
            "type": "String",
            "value-choices": [
                "true", 
                "false"
            ],
            "value-key": "[USE_INDEX]"
        },
        {
            "command-line-flag": "-soft_masking",
            "description": "Apply filtering locations as soft masks\n  Default 'true'",
            "id": "soft_masking",
            "name": "Filtering Locations As Soft Masks",
            "optional": true,
            "type": "String",
            "value-choices": [
                "true", 
                "false"
            ],
            "value-key": "[SOFT_MASKING]"
        },
        {
            "command-line-flag": "-sum_stats",
            "description": "Use sum statistics",
            "id": "sum_stats",
            "name": "Sum Statistics",
            "optional": true,
            "type": "String",
            "value-choices": [
                "true", 
                "false"
            ],
            "value-key": "[SUM_STATS]"
        },
        {
            "command-line-flag": "-word_size",
            "description": "Word size for wordfinder algorithm (length of best perfect match)",
            "id": "word_size",
            "name": "Word Size",
            "optional": true,
            "type": "Number",
            "integer": true,
            "minimum": 4,
            "value-key": "[WORD_SIZE]"
        },
        {
            "command-line-flag": "-gapopen",
            "description": "Cost to open a gap",
            "id": "gapopen",
            "name": "Gap Open Penalty",
            "optional": true,
            "type": "Number",
            "integer": true,
            "value-key": "[GAPOPEN]"
        },
        {
            "command-line-flag": "-gapextend",
            "description": "Cost to extend a gap",
            "id": "gapextend",
            "name": "Gap Extend Penalty",
            "optional": true,
            "type": "Number",
            "integer": true,
            "value-key": "[GAPEXTEND]"
        },
        {
            "command-line-flag": "-max_hsps",
            "description": "Set maximum number of HSPs per subject sequence to save for each query",
            "id": "max_hsps",
            "name": "Max HSPs Per Subject",
            "optional": true,
            "type": "Number",
            "integer": true,
            "minimum": 1,
            "value-key": "[MAX_HSPS]"
        },
        {
            "command-line-flag": "-culling_limit",
            "description": "   If the query range of a hit is enveloped by that of at least this many\n   higher-scoring hits, delete the hit",
            "id": "culling_limit",
            "name": "Higher Scoring Hit Culling Limit",
            "optional": true,
            "type": "Number",
            "integer": true,
            "minimum": 0,
            "value-key": "[CULLING_LIMIT]",
            "disables-inputs": [ "best_hit_overhang", "best_hit_score_edge"]
        },
        {
            "command-line-flag": "-max_target_seqs",
            "description": "   Maximum number of aligned sequences to keep\n   Not applicable for outfmt <= 4\n   Default = `500'",
            "id": "max_target_seqs",
            "name": "Maximum Target Sequence",
            "optional": true,
            "type": "Number",
            "integer": true,
            "minimum": 1,
            "value-key": "[MAX_TARGET_SEQS]",
            "disables-inputs": [ "num_descriptions", "num_alignments"]
        },
        {
            "command-line-flag": "-dbsize",
            "description": "Effective length of the database",
            "id": "dbsize",
            "name": "Database Size",
            "optional": true,
            "type": "Number",
            "integer": true,
            "maximum": 255,
            "value-key": "[DBSIZE]"
        },
        {
            "command-line-flag": "-searchsp",
            "description": "Effective length of the search space",
            "id": "searchsp",
            "name": "Search Space Length",
            "optional": true,
            "type": "Number",
            "integer": true,
            "minimum": 0,
            "maximum": 255,
            "value-key": "[SEARCHSP]"
        },
        {
            "command-line-flag": "-window_size",
            "description": "Multiple hits window size, use 0 to specify 1-hit algorithm",
            "id": "window_size",
            "name": "Multiple Hits Window Size",
            "optional": true,
            "type": "Number",
            "integer": true,
            "minimum": 0,
            "value-key": "[WINDOW_SIZE]"
        },
        {
            "command-line-flag": "-num_threads",
            "description": "   Number of threads (CPUs) to use in the BLAST search\n   Default = `1'",
            "id": "num_threads",
            "name": "Maximum Target Sequence",
            "optional": true,
            "type": "Number",
            "integer": true,
            "minimum": 1,
            "maximum": 12,
            "value-key": "[NUM_THREADS]",
            "disables-inputs": ["remote"]
        },
        {
            "command-line-flag": "-penalty",
            "description": "Penalty for a nucleotide mismatch",
            "id": "penalty",
            "name": "Nucleotide Mismatch Penalty",
            "optional": true,
            "type": "Number",
            "integer": true,
            "maximum": 0,
            "value-key": "[PENALTY]"
        },
        {
            "command-line-flag": "-reward",
            "description": "Reward for a nucleotide match",
            "id": "reward",
            "name": "Nucleotide Match Reward",
            "optional": true,
            "type": "Number",
            "integer": true,
            "minimum": 0,
            "value-key": "[REWARD]"
        },
        {
            "command-line-flag": "-window_masker_taxid",
            "description": "Enable WindowMasker filtering using a Taxonomic ID",
            "id": "window_masker_taxid",
            "name": "Taxonomic ID for WindowMasker Filtering",
            "optional": true,
            "type": "Number",
            "integer": true,
            "value-key": "[WINDOW_MASKER_TAXID]"
        },
        {
            "command-line-flag": "-template_length",
            "description": "Discontiguous MegaBLAST template length",
            "id": "template_length",
            "name": "Discontiguous MegaBLAST Template Length",
            "optional": true,
            "type": "Number",
            "integer": true,
            "value-choices": [
                16,
                18,
                21
            ], 
            "requires-inputs": ["template_type"],
            "value-key": "[TEMPLATE_LENGTH]"
        },
        {
            "command-line-flag": "-min_raw_gapped_score",
            "description": "Minimum raw gapped score to keep an alignment in the preliminary gapped and traceback stages",
            "id": "min_raw_gapped_score",
            "name": "Minumum Raw Gapped Score",
            "optional": true,
            "type": "Number",
            "integer": true,
            "value-key": "[MIN_RAW_GAPPED_SCORE]"
        },
        {
            "command-line-flag": "-off_diagonal_range",
            "description": "   Number of off-diagonals to search for the 2nd hit, use 0 to turn off\n   Default = `0'",
            "id": "off_diagonal_range",
            "name": "Off-Diagonal Range",
            "optional": true,
            "type": "Number",
            "integer": true,
            "minimum": 0,
            "value-key": "[OFF_DIAGONAL_RANGE]"
        },
        {
            "command-line-flag": "-evalue",
            "description": "  Expectation value (E) threshold for saving hits\n  Default = `10'",
            "id": "evalue",
            "name": "Expectation Value",
            "optional": true,
            "type": "Number",
            "value-key": "[EVALUE]"
        },
        {
            "command-line-flag": "-perc_identity",
            "description": "Percent identity",
            "id": "perc_identity",
            "name": "Percent identity",
            "optional": true,
            "type": "Number",
            "minimum": 0,
            "maximum": 100,
            "value-key": "[PERC_IDENTITY]"
        },
        {
            "command-line-flag": "-qcov_hsp_perc",
            "description": "Percent query coverage per hsp",
            "id": "qcov_hsp_perc",
            "name": "Percentage Query Coverage",
            "optional": true,
            "type": "Number",
            "minimum": 0,
            "maximum": 100,
            "value-key": "[QCOV_HSP_PERC]"
        },
        {
            "command-line-flag": "-best_hit_overhang",
            "description": "Best Hit algorithm overhang value (recommended value: 0.1)",
            "id": "best_hit_overhang",
            "name": "Best Hit Algorithm Overhang",
            "optional": true,
            "type": "Number",
            "minimum": 0,
            "maximum": 0.5,
            "exclusive-minimum": true,
            "exclusive-maximum": true,
            "value-key": "[BEST_HIT_OVERHANG]",
            "disables-inputs": ["culling_limit"]
        },
        {
            "command-line-flag": "-best_hit_score_edge",
            "description": "Best Hit algorithm score edge value (recommended value: 0.1)",
            "id": "best_hit_score_edge",
            "name": "Best Hit Algorithm Score Edge Value",
            "optional": true,
            "type": "Number",
            "minimum": 0,
            "maximum": 0.5,
            "exclusive-minimum": true,
            "exclusive-maximum": true,
            "value-key": "[BEST_HIT_SCORE_EDGE]",
            "disables-inputs": ["culling_limit"]
        },
        {
            "command-line-flag": "-xdrop_ungap",
            "description": "X-dropoff value (in bits) for ungapped extensions",
            "id": "xdrop_ungap",
            "name": "Ungapped Extensions X-dropoff Value",
            "optional": true,
            "type": "Number",
            "value-key": "[XDROP_UNGAP]"
        },
        {
            "command-line-flag": "-xdrop_gap",
            "description": "X-dropoff value (in bits) for preliminary gapped extensions",
            "id": "xdrop_gap",
            "name": "Preiliminary Gapped Extensions X-dropoff Value",
            "optional": true,
            "type": "Number",
            "value-key": "[XDROP_GAP]"
        },
        {
            "command-line-flag": "-xdrop_gap_final",
            "description": "X-dropoff value (in bits) for final gapped alignment",
            "id": "xdrop_gap_final",
            "name": "Final Gapped Extensions X-dropoff Value",
            "optional": true,
            "type": "Number",
            "value-key": "[XDROP_GAP_FINAL]"
        },
        {
            "command-line-flag": "-query",
            "description": "Input file name",
            "id": "query",
            "name": "Query",
            "optional": false,
            "type": "File",
            "value-key": "[QUERY]"
        },
        {
            "command-line-flag": "-subject",
            "description": "Subject sequence(s) to search",
            "id": "subject",
            "name": "Subject",
            "optional": true,
            "type": "File",
            "value-key": "[SUBJECT]",
            "disables-inputs": ["db", "gilist", "seqidlist", "negative_gilist", "negative_seqidlist", "db_soft_mask", "db_hard_mask"]
        },
        {
            "command-line-flag": "-import_search_strategy",
            "description": "Search strategy to use",
            "id": "import_search_strategy",
            "name": "Search Strategy File",
            "optional": true,
            "type": "File",
            "value-key": "[IMPORT_SEARCH_STRATEGY]",
            "disables-inputs": ["export_search_strategy"]
        },
        {
            "command-line-flag": "-export_search_strategy",
            "description": "File name to record the search strategy used",
            "id": "export_search_strategy",
            "name": "Search Strategy Record Filename",
            "optional": true,
            "type": "File",
            "value-key": "[EXPORT_SEARCH_STRATEGY]",
            "disables-inputs": ["import_search_strategy"]
        },
        {
            "command-line-flag": "-show_gis",
            "description": "Show NCBI GIs in deflines?",
            "id": "show_gis",
            "name": "Show NCBI GIs",
            "optional": true,
            "type": "Flag",
            "value-key": "[fSHOW_GIS]"
        },
        {
            "command-line-flag": "-html",
            "description": "Produce HTML Output",
            "id": "html",
            "name": "Show HTML",
            "optional": true,
            "type": "Flag",
            "value-key": "[fHTML]"
        },
        {
            "command-line-flag": "-outfmt",
            "description": "   alignment view options:\n     0 = Pairwise,\n     1 = Query-anchored showing identities,\n     2 = Query-anchored no identities,\n     3 = Flat query-anchored showing identities,\n     4 = Flat query-anchored no identities,\n     5 = BLAST XML,\n     6 = Tabular,\n     7 = Tabular with comment lines,\n     8 = Seqalign (Text ASN.1),\n     9 = Seqalign (Binary ASN.1),\n    10 = Comma-separated values,\n    11 = BLAST archive (ASN.1),\n    12 = Seqalign (JSON),\n    13 = Multiple-file BLAST JSON,\n    14 = Multiple-file BLAST XML2,\n    15 = Single-file BLAST JSON,\n    16 = Single-file BLAST XML2,\n    17 = Sequence Alignment/Map (SAM),\n    18 = Organism Report\n\n   Options 6, 7, 10 and 17 can be additionally configured to produce\n   a custom format specified by space delimited format specifiers.\n   The supported format specifiers for options 6, 7 and 10 are:\n            qseqid means Query Seq-id\n               qgi means Query GI\n              qacc means Query accesion\n           qaccver means Query accesion.version\n              qlen means Query sequence length\n            sseqid means Subject Seq-id\n         sallseqid means All subject Seq-id(s), separated by a ';'\n               sgi means Subject GI\n            sallgi means All subject GIs\n              sacc means Subject accession\n           saccver means Subject accession.version\n           sallacc means All subject accessions\n              slen means Subject sequence length\n            qstart means Start of alignment in query\n              qend means End of alignment in query\n            sstart means Start of alignment in subject\n              send means End of alignment in subject\n              qseq means Aligned part of query sequence\n              sseq means Aligned part of subject sequence\n            evalue means Expect value\n          bitscore means Bit score\n             score means Raw score\n            length means Alignment length\n            pident means Percentage of identical matches\n            nident means Number of identical matches\n          mismatch means Number of mismatches\n          positive means Number of positive-scoring matches\n           gapopen means Number of gap openings\n              gaps means Total number of gaps\n              ppos means Percentage of positive-scoring matches\n            frames means Query and subject frames separated by a '/'\n            qframe means Query frame\n            sframe means Subject frame\n              btop means Blast traceback operations (BTOP)\n            staxid means Subject Taxonomy ID\n          ssciname means Subject Scientific Name\n          scomname means Subject Common Name\n        sblastname means Subject Blast Name\n         sskingdom means Subject Super Kingdom\n           staxids means unique Subject Taxonomy ID(s), separated by a ';'\n                         (in numerical order)\n         sscinames means unique Subject Scientific Name(s), separated by a ';'\n         scomnames means unique Subject Common Name(s), separated by a ';'\n        sblastnames means unique Subject Blast Name(s), separated by a ';'\n                         (in alphabetical order)\n        sskingdoms means unique Subject Super Kingdom(s), separated by a ';'\n                         (in alphabetical order)\n            stitle means Subject Title\n        salltitles means All Subject Title(s), separated by a '<>'\n           sstrand means Subject Strand\n             qcovs means Query Coverage Per Subject\n           qcovhsp means Query Coverage Per HSP\n            qcovus means Query Coverage Per Unique Subject (blastn only)\n   When not provided, the default value is:\n   'qaccver saccver pident length mismatch gapopen qstart qend sstart send\n   evalue bitscore', which is equivalent to the keyword 'std'\n   The supported format specifier for option 17 is:\n                SQ means Include Sequence Data\n                SR means Subject as Reference Seq\n  Default = `0'",
            "id": "outfmt",
            "name": "Alignment View Options",
            "optional": true,
            "type": "String",
            "value-key": "[OUTFMT]"
        },
        {
            "command-line-flag": "-num_descriptions",
            "description": "   Number of database sequences to show one-line descriptions for\n   Not applicable for outfmt > 4\n   Default = `500'",
            "id": "num_descriptions",
            "name": "Number of Sequence Descriptions to Show",
            "optional": true,
            "type": "Number",
            "minimum": 0,
            "value-key": "[NUM_DESCRIPTIONS]",
            "disables-inputs": [ "max_target_seqs"]
        },
        {
            "command-line-flag": "-num_alignments",
            "description": "   Number of database sequences to show alignments for\n   Default = `250'",
            "id": "num_alignments",
            "name": "Number of Sequence Alignments to Show",
            "optional": true,
            "type": "Number",
            "minimum": 0,
            "value-key": "[NUM_ALIGNMENTS]",
            "disables-inputs": [ "max_target_seqs"]
        },
        {
            "command-line-flag": "-line_length",
            "description": "   Line length for formatting alignments\n   Not applicable for outfmt > 4\n   Default = `60'",
            "id": "line_length",
            "name": "Line Length",
            "optional": true,
            "type": "Number",
            "minimum": 1,
            "value-key": "[LINE_LENGTH]"
        },
        {
            "command-line-flag": "-out",
            "description": "   Output file name",
            "id": "out",
            "name": "Output file name",
            "optional": true,
            "type": "String",
            "value-key": "[OUT]"
        }
    ],
    "output-files": [
        {
            "id": "output",
            "name": "Output File",
            "path-template": "[OUT]",
            "optional": false
        }
    ],
    "schema-version": "0.5",
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "tags": {"domain": ["bioinformatics", "blast"]},
	"tests":[  
	    {  
	        "name":"test1",
	        "invocation": {  
	            "query": "test1_query.fasta",
	            "db": "sample",
	            "outfmt": "5",
	            "out": "blastn.out",
	            "max_target_seqs": 5
	        },
	        "assertions":{  
	            "exit-code":0,
	            "output-files":[  
	                {  
	                    "id": "output",
	                    "md5-reference": "eb917a2e0723ee9cca9d86db85e83b69"
	                }
	            ]
	        }
	    }
	]
}